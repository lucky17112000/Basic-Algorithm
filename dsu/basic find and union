#include <bits/stdc++.h>
#define endl '\n'

#define ll long long int
#define inf INT_MAX
#define negInf INT_MIN


using namespace std;
const int N = 1e5 + 5;
int par[N];
int g_size[N];
void dsu_init(int n)
{
    for (int i = 0; i < n; ++i)
    {
        par[i] = -1;
        g_size[i] = 1;
    }
}
int dsu_find(int node) // find operation with path compression
{
    if (par[node] == -1)
        return node;
    int leader = dsu_find(par[node]);
    par[node] = leader;
    return leader;
}
void dsu_union(int node1, int node2) // union by size
{
    int leaderA = dsu_find(node1);
    int leaderB = dsu_find(node2);
    if (g_size[leaderA] > g_size[leaderB])
    {
        par[leaderB] = leaderA;
        g_size[leaderA] += g_size[leaderB];
    }
    else
    {
        par[leaderA] = leaderB;
        g_size[leaderB] += g_size[leaderA];
    }
}
static void go_on()
{
    dsu_init(7);
    dsu_union(1, 2);
    dsu_union(2, 3);
    dsu_union(4, 5);
    dsu_union(5, 6);
    dsu_union(1, 6);
    cout << dsu_find(1);
    cout << endl;
    cout << dsu_find(6);
    cout << endl;
    cout << dsu_find(3)<<endl;
    for (int i = 1; i < 7; ++i)
        cout << par[i] << " ";
    cout << endl;
    cout << g_size[5];
}

int32_t main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    // hey_output();
    ll tt = 1;
    // cin >> tt;
    while (tt--)
    {
        go_on();
    }

    return 0;
}
