#include <bits/stdc++.h>
#define endl '\n'
#define strim stringstream
#define ll long long int
#define inf INT_MAX
#define negInf INT_MIN
#define linf 1e18
#define nlinf -1e18
#define mod %
#define find_array_max *max_element(arr.begin(), arr.end());
#define find_array_min *min_element(arr.begin(), arr.end());
#define pii pair<int, int>
#define pll pair<ll, ll>


using namespace std;
const int N = 1e5 + 5;
int par[N];
int g_size[N];
class Edge
{
public:
    int u, v, w;
    Edge(int u, int v, int w)
    {
        this->u = u;
        this->v = v;
        this->w = w;
    }
};

// int arr[N];
// sort(arr , arr+N)
bool cmp(Edge a, Edge b)
{
    return a.w < b.w;
}
void dsu_init(int n)
{
    for (int i = 0; i < n; ++i)
    {
        par[i] = -1;
        g_size[i] = 1;
    }
}
int dsu_find(int node)
{
    if (par[node] == -1)
        return node;
    int leader = dsu_find(par[node]);
    par[node] = leader;
    return leader;
}
void dsu_union(int node1, int node2)
{
    int leaderA = dsu_find(node1);
    int leaderB = dsu_find(node2);
    if (g_size[leaderA] > g_size[leaderB])
    {
        par[leaderB] = leaderA;
        g_size[leaderA] += g_size[leaderB];
    }
    else
    {
        par[leaderA] = leaderB;
        g_size[leaderB] += g_size[leaderA];
    }
}
static void go_on()
{
    int n, e;
    cin >> n >> e;
    dsu_init(n);
    vector<Edge> edgeList;
    while (e--)
    {
        int u, v, w;
        cin >> u >> v >> w;
        edgeList.push_back(Edge(u, v, w));
    }
    sort(edgeList.begin(), edgeList.end(), cmp);
    int total = 0;
    int remove = 0;
    for (auto ed : edgeList)
    {
        int leaderU = dsu_find(ed.u);
        int leaderV = dsu_find(ed.v);
        if (leaderU == leaderV)
        {
            ++remove;

            continue;
        }
        else
        {
            dsu_union(ed.u, ed.v);
            total += ed.w;
        }
    }
    cout << endl
         << endl;
    cout << remove << " " << total << endl;
}

int32_t main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    // hey_output();
    ll tt = 1;
    // cin >> tt;
    while (tt--)
    {
        go_on();
    }

    return 0;
}
