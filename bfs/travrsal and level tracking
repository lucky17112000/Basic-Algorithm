// Bismillah
//  Problem is -> bfs.cpp
#include <bits/stdc++.h>
#define ll long long int
using namespace std;
const ll N = 1e5 + 7;
vector<ll> adj[N];
bool visited[N];
ll level[N];
ll path[N];
void bfs(ll src)
{
    queue<ll> q;
    q.push(src);
    visited[src] = true;
    level[src] = 0;
    while (!q.empty())
    {
        ll parent = q.front();
        q.pop();
        cout << parent << " ";
        for (auto child : adj[parent])
        {
            if (!visited[child])
            {
                q.push(child);
                visited[child] = true;
                level[child] = level[parent] + 1;
                path[child] = parent;
            }
        }
    }
}
int32_t main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    ll n, e;
    cin >> n >> e;
    while (e--)
    {
        ll a, b;
        cin >> a >> b;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }
    memset(visited, false, sizeof(visited));
    memset(level, -1, sizeof(level));
    memset(path, -1, sizeof(path));
    bfs(0);
    cout << endl;
    // for (int i = 0; i < n; ++i)
    // {
    //     cout << i << " : " << level[i] << endl;
    // }
    ll des;
    cin >> des;
    ll x = des;
    stack<ll> st;
    while (x != -1)
    {
        st.push(x);
        x = path[x];
    }
    while (!st.empty())
    {
        cout << st.top() << " ";
        st.pop();
    }
    return 0;
}
// Alhamdulillah
